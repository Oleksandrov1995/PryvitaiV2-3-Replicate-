import React, { useRef, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import './Editor.css';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
const CANVAS_MAX_WIDTH = 800;
const BANNER_HEIGHT = 100;

const Editor = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const canvasRef = useRef(null);

  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
  const imageUrl = searchParams.get('imageUrl');
  const text = searchParams.get('text') || '';

  console.log('Editor - –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:', { imageUrl, text });

  useEffect(() => {
    if (!imageUrl) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");
    const img = new window.Image();
    img.crossOrigin = "anonymous";
    img.src = imageUrl;
    
    img.onload = () => {
      console.log('Editor - –º–∞–ª—é—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º:', text);
      
      // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—ñ–≤
      const scale = Math.min(CANVAS_MAX_WIDTH / img.width, 1);
      const imgWidth = img.width * scale;
      const imgHeight = img.height * scale;
      const canvasWidth = imgWidth;
      
      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏—Å–æ—Ç—É –ø–ª–∞—à–∫–∏ –ø—ñ–¥ —Ç–µ–∫—Å—Ç
      ctx.font = "24px sans-serif";
      const lines = wrapText(ctx, text, canvasWidth - 40);
      const lineHeight = 30;
      const textHeight = lines.length * lineHeight;
      const bannerHeight = Math.max(BANNER_HEIGHT, textHeight + 40);
      
      console.log('Editor - —Ä–æ–∑–º—ñ—Ä–∏:', { 
        lines: lines.length, 
        textHeight, 
        bannerHeight, 
        canvasHeight: imgHeight + bannerHeight 
      });
      
      const canvasHeight = imgHeight + bannerHeight;
      
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;

      // –ú–∞–ª—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      ctx.clearRect(0, 0, canvasWidth, canvasHeight);
      ctx.drawImage(img, 0, 0, imgWidth, imgHeight);

      // –ú–∞–ª—é—î–º–æ –±—ñ–ª—É –ø–ª–∞—à–∫—É
      ctx.fillStyle = "#ffffff";
      ctx.fillRect(0, imgHeight, canvasWidth, bannerHeight);

      // –ú–∞–ª—é—î–º–æ —á–æ—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç
      ctx.font = "24px sans-serif";
      ctx.fillStyle = "#000000";
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      
      // –¶–µ–Ω—Ç—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç –≤ –ø–ª–∞—à—Ü—ñ
      let y = imgHeight + bannerHeight / 2 - textHeight / 2 + lineHeight / 2;
      
      lines.forEach(line => {
        ctx.fillText(line, canvasWidth / 2, y);
        y += lineHeight;
      });
    };
  }, [imageUrl, text]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å—É —Ç–µ–∫—Å—Ç—É
  function wrapText(ctx, text, maxWidth) {
    if (!text) return [""];
    const words = text.split(" ");
    const lines = [];
    let line = "";
    
    for (let n = 0; n < words.length; n++) {
      const testLine = line + words[n] + " ";
      const metrics = ctx.measureText(testLine);
      const testWidth = metrics.width;
      
      if (testWidth > maxWidth && n > 0) {
        lines.push(line.trim());
        line = words[n] + " ";
      } else {
        line = testLine;
      }
    }
    lines.push(line.trim());
    return lines;
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const handleDownload = () => {
    const canvas = canvasRef.current;
    
    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ blob –∑ canvas
      canvas.toBlob((blob) => {
        if (blob) {
          // –ó–∞–≤–∂–¥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –Ω–∞ –ø—Ä–∏—Å—Ç—Ä—ñ–π
          downloadBlob(blob);
        }
      }, "image/png");
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
    }
  };

  // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è blob
  const downloadBlob = (blob) => {
    try {
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = "pryvitai-card.png";
      
      // –î–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –¥–æ–¥–∞—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —Ä–æ–±–æ—Ç–∏
      if (/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
        link.setAttribute('target', '_blank');
        link.setAttribute('rel', 'noopener noreferrer');
      }
      
      // –î–æ–¥–∞—î–º–æ –¥–æ DOM, –∫–ª—ñ–∫–∞—î–º–æ —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // –û—á–∏—â—É—î–º–æ URL –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      setTimeout(() => {
        URL.revokeObjectURL(url);
      }, 100);
      
      console.log('–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É');
    }
  };

  // –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
  const handleShare = () => {
    const canvas = canvasRef.current;
    
    try {
      canvas.toBlob((blob) => {
        if (blob) {
          if (navigator.share && blob) {
            const file = new File([blob], "pryvitai-card.png", { type: "image/png" });
            navigator.share({
              title: "–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑ gifta.pp.ua –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –í–∞—Å",
              // text: "–ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –Ω–∞ –º–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—É –ª–∏—Å—Ç—ñ–≤–∫—É!",
              files: [file]
            }).catch((error) => {
              console.log('–ü–æ–º–∏–ª–∫–∞ –ø–æ–¥—ñ–ª—É:', error);
              // Fallback –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø—É
              fallbackShare(canvas);
            });
          } else {
            // Fallback –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø—É
            fallbackShare(canvas);
          }
        }
      }, "image/png");
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–¥—ñ–ª—ñ:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–¥—ñ–ª—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
    }
  };

  // Fallback —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–¥—ñ–ª—É
  const fallbackShare = (canvas) => {
    try {
      const dataUrl = canvas.toDataURL("image/png");
      navigator.clipboard.writeText(dataUrl).then(() => {
        alert("–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É");
      }).catch(() => {
        alert("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è");
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ fallback –ø–æ–¥—ñ–ª—É:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–¥—ñ–ª—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
    }
  };

  // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const handleCreateNew = () => {
    navigate("/");
  };

  // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –¥–∞–Ω–∏—Ö
  const handleGoBack = () => {
    navigate("/");
  };

  if (!imageUrl) {
    return (
      <div className="editor-container">
        <div className="error-message">
          <p>–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è</p>
          <button onClick={handleCreateNew} className="create-new-button">
            –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="editor-container">
      <button onClick={handleGoBack} className="back-button">
        ‚Üê
      </button>
      
      <div className="editor-header">
        {/* <h2>üé® –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤–∏–∫–æ–Ω–∞–Ω–æ</h2> */}
        {/* <p>–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–∞ –∑–±–µ—Ä–µ–∂—ñ—Ç—å –≤–∞—à—É –ø—Ä–∏–≤—ñ—Ç–∞–π–∫—É</p> */}
      </div>

      <div className="canvas-container">
        <canvas 
          ref={canvasRef} 
          className="editor-canvas"
          style={{ maxWidth: '100%', height: 'auto' }}
        />
      </div>

      <div className="editor-actions">
        <button onClick={handleShare} className="action-button share-button">
          üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è
        </button>
        
        <button onClick={handleDownload} className="action-button download-button">
          üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
        </button>
        
        <button onClick={handleCreateNew} className="action-button create-button">
          ‚ú® –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ
        </button>
      </div>

      <div className="editor-info">
        <p>üí° –ü–æ—Ä–∞–¥–∞: –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–∏—Å—Ç—ñ–≤–∫–æ—é –∞–±–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —ó—ó –Ω–∞ –ø—Ä–∏—Å—Ç—Ä—ñ–π</p>
      </div>
    </div>
  );
};

export default Editor; 

