import React, { useState, forwardRef, useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import "./ImageGenerationSection.css";
import { dalleImagePrompt } from "../../../prompts/openai/dalleImagePrompt";
import { API_URLS } from "../../../config/api";
import { uploadPhoto } from "../../../config/uploadPhoto";
import { generateImagePrompt } from "../../../config/generateImagePrompt";
import { downloadImage } from "../../../utils/downloadImage";
import { replicateCatImagePrompt, replicateImagePrompt } from "../../../prompts/replicate/replicateImagePrompt";
import { generateImageReplicate } from "../../../config/generateImageReplicate";

const ImageGenerationSection = forwardRef(({ onImageGenerated, scrollToNextSection, formData, onGenerateImageRef, greetingTextRef }, ref) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedImageUrl, setGeneratedImageUrl] = useState("");
  const navigate = useNavigate();

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  const handleEditImage = () => {
    if (generatedImageUrl) {
      // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ GreetingTextSection –∞–±–æ –∑ formData
      let textToUse = '';
      
      if (greetingTextRef && greetingTextRef.current && greetingTextRef.current.getCurrentText) {
        textToUse = greetingTextRef.current.getCurrentText();
      } else {
        textToUse = formData.greetingText || '';
      }
      
      const params = new URLSearchParams({
        imageUrl: generatedImageUrl,
        text: textToUse
      });
      navigate(`/editor?${params.toString()}`);
    }
  };

  const generateImage = useCallback(async () => {
    setIsGenerating(true);
    
    try {
      console.log('FormData –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', formData);
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∞—à –ø—É–±–ª—ñ—á–Ω–∏–π URL —è–∫ –∑–∞–≥–ª—É—à–∫—É
      let photoUrl = "https://res.cloudinary.com/dnma2ioeb/image/upload/v1754218865/pryvitai-photos/tldl1woyxzaqadwzogx1.jpg";
      
      // –ö—Ä–æ–∫ 1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –Ω–∞ Cloudinary (—è–∫—â–æ —î —Ñ–æ—Ç–æ)
      if (formData.photo) {
        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –≤ base64
        const convertToBase64 = (file) => {
          return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = (error) => reject(error);
          });
        };

        const photoBase64 = await convertToBase64(formData.photo);
        photoUrl = await uploadPhoto(photoBase64);
      }
      
      // –ö—Ä–æ–∫ 2: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–º–ø—Ç–∞ –∑ URL —Ñ–æ—Ç–æ
      const formDataWithUrl = {
        ...formData,
        photoUrl: photoUrl
      };
      
      const generatedPrompt = replicateImagePrompt(formDataWithUrl);
      console.log('–ü—Ä–æ–º–ø—Ç –¥–ª—è replicate:', generatedPrompt);
      
      const data = await generateImagePrompt(generatedPrompt);
      
      if (data.generatedPrompt) {
        console.log('–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç:', data.generatedPrompt);
        // –ö—Ä–æ–∫ 3: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Replicate
        try {
          console.log('–í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–ø–∏—Ç –¥–æ Replicate.');
          if (!data.generatedPrompt) {
            throw new Error('–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç');
          }
          const generatedImageUrl = await generateImageReplicate({
            modelId: "black-forest-labs/flux-kontext-pro",
            input: {
              prompt: "Make this a 90s cartoon",
              input_image: photoUrl,
              aspect_ratio: "match_input_image",
              // strength: 0.8 // –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
            }
          });
          setGeneratedImageUrl(generatedImageUrl);
          if (onImageGenerated) {
            onImageGenerated("finalGeneratedImageUrl", generatedImageUrl);
          }
        } catch (makeError) {
          console.error('–ü–æ–º–∏–ª–∫–∞ replicate:', makeError);
        }
        
        if (onImageGenerated) {
          onImageGenerated("generatedImagePrompt", data.generatedPrompt);
          onImageGenerated("imageUrl", photoUrl);
        }
        
        // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        if (scrollToNextSection) {
          setTimeout(() => scrollToNextSection(), 1000);
        }
      }
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', error);
    } finally {
      setIsGenerating(false);
    }
  }, [formData, onImageGenerated, scrollToNextSection]);

  const isFormComplete = () => {
    let completedFields = 0;
    
    if (formData.cardStyle) completedFields++;
    if (formData.cardMood) completedFields++;
    if (formData.photo) completedFields++;
    if (formData.gender) completedFields++;
    if (formData.age) completedFields++;
    if (formData.hobby) completedFields++;
    if (formData.greetingText) completedFields++;
    if (formData.greetingSubject) completedFields++;
    if (formData.trait) completedFields++;
    
    return completedFields >= 2;
  };

  // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é generateImage —á–µ—Ä–µ–∑ ref
  useEffect(() => {
    if (onGenerateImageRef) {
      onGenerateImageRef.current = { generateImage, isGenerating };
    }
  }, [generateImage, isGenerating, onGenerateImageRef]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const handleDownloadImage = async () => {
    if (!generatedImageUrl) return;
    
    const filename = `pryvitai-${Date.now()}.png`;
    await downloadImage(generatedImageUrl, filename);
  };




  return (
    <section ref={ref} className="image-generation-section">
      <button 
        onClick={generateImage}
        disabled={isGenerating || !isFormComplete()}
        className={`generate-image-button ${!isFormComplete() ? 'disabled' : ''}`}
      >
        {isGenerating ? (
          <>
            <span className="loading-spinner"></span>
            –ì–µ–Ω–µ—Ä—É—é –ø—Ä–∏–≤—ñ—Ç–∞–π–∫—É
          </>
        ) : (
          generatedImageUrl ? 'üîÑ –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ' : 'üé® –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è'
        )}
      </button>

      {isGenerating && (
        <div className="generation-time-info">
          <p>–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–π–º–∞—î –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ 2-3 —Ö–≤–∏–ª–∏–Ω–∏</p>
        </div>
      )}

      {generatedImageUrl && (
        <div className="final-image-result">
          <p><strong>üñºÔ∏è –§—ñ–Ω–∞–ª—å–Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:</strong></p>
         
          <div className="image-preview">
            <img src={generatedImageUrl} alt="–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è" className="preview-image" />
          </div>
          <p>üåü –§—ñ–Ω–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!</p>
          
          <button 
            onClick={handleDownloadImage}
            className="download-button"
          >
            üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–π–∫—É
          </button>
          
          <button 
            onClick={handleEditImage}
            className="edit-button"
          >
            ‚úèÔ∏è –î–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
          </button>
        </div>
      )}
    </section>
  );
});

export default ImageGenerationSection;
