import React, { useState, forwardRef, useRef } from "react";
import "./GreetingTextSection.css";
import { greetingTextPrompts } from "../../../prompts/openai/greetingTextPrompts";
import { API_URLS } from "../../../config/api";

const GreetingTextSection = forwardRef(({ onTextChange, scrollToNextSection, formData }, ref) => {
  const [greetingText, setGreetingText] = useState("");
  const [previewText, setPreviewText] = useState(""); // –ü—Ä–æ–º—ñ–∂–Ω–∏–π —Å—Ç–µ–π—Ç –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedGreetings, setGeneratedGreetings] = useState([]);
  const textareaRef = useRef(null);
  const generatedGreetingsRef = useRef(null);
  const maxLength = 500;

    const sectionRef = useRef(null); // –æ–∫—Ä–µ–º–∏–π ref –Ω–∞ DOM
  

  const getCurrentText = () => previewText || greetingText || '';


  // –ï–∫—Å–ø–æ–Ω—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —á–µ—Ä–µ–∑ ref
  React.useImperativeHandle(ref, () => ({
    getCurrentText
  }));

  const handleTextChange = (value) => {
    if (value.length <= maxLength) {
      setPreviewText(value); // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ preview
      
      // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç –≤ formData
      if (onTextChange) {
        onTextChange("greetingText", value);
      }
      
      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å–∫—Ä–æ–ª –∑–≤—ñ–¥—Å–∏
    }
  };

  const handleExampleClick = (example) => {
    handleTextChange(example);
    
    // –ü–µ—Ä–µ–¥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É —ñ–¥–µ—é –≤ formData
    if (onTextChange) {
      onTextChange("greetingText", example);
    }
    
    // –°–∫—Ä–æ–ª–∏–º–æ –¥–æ textarea –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –≤–∞—Ä—ñ–∞–Ω—Ç—É
    if (textareaRef.current) {
      textareaRef.current.scrollIntoView({
        behavior: 'smooth',
        block: 'center',
        inline: 'nearest'
      });
      
      // –§–æ–∫—É—Å—É—î–º–æ—Å—è –Ω–∞ textarea –ø—ñ—Å–ª—è —Å–∫—Ä–æ–ª—É
      setTimeout(() => {
        if (textareaRef.current) {
          textareaRef.current.focus();
        }
      }, 500);
    }
  };

  const generateGreetingIdeas = async () => {
    setIsGenerating(true);
    try {
      console.log('FormData –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:', formData);
      const prompt = greetingTextPrompts(formData);
      console.log('–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç:', prompt);
      
      const response = await fetch(API_URLS.GENERATE_GREETING, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt }),
      });

      if (!response.ok) {
        throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å');
      }

      const data = await response.json();
      setGeneratedGreetings(data.greetings || []);
      
      // –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å –ø—ñ—Å–ª—è —ó—Ö –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
      setTimeout(() => {
        if (generatedGreetingsRef.current && data.greetings && data.greetings.length > 0) {
          generatedGreetingsRef.current.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
            inline: 'nearest'
          });
        }
      }, 300); // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± DOM –≤—Å—Ç–∏–≥ –æ–Ω–æ–≤–∏—Ç–∏—Å—è
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:', error);
      alert('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    } finally {
      setIsGenerating(false);
    }
  };

  const getCharacterCountClass = () => {
    const remaining = maxLength - previewText.length;
    if (remaining < 50) return 'error';
    if (remaining < 100) return 'warning';
    return '';
  };

   React.useImperativeHandle(ref, () => ({
    scrollIntoView: (options) => sectionRef.current?.scrollIntoView(options),
    getCurrentText
  }));

  return (
    <section ref={sectionRef} className="greeting-text-section">
      <h2>–¢–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è</h2>
      {/* <p className="description">
        –ù–∞–ø–∏—à—ñ—Ç—å –æ—Å–æ–±–∏—Å—Ç–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è. –¶–µ –±—É–¥–µ –æ—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏.
      </p> */}

        <button 
          onClick={generateGreetingIdeas}
          disabled={isGenerating}
          className="generate-button"
          style={{ display: generatedGreetings.length > 0 ? 'none' : 'block' }}
        >
          {isGenerating ? '–ì–µ–Ω–µ—Ä—É—é...' : '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–¥–µ—ó —Ç–µ–∫—Å—Ç—É –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è'}
        </button>
        {/* <span>–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–π–º–µ –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ 30 —Å–µ–∫—É–Ω–¥</span> - —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ —Å—Ç–∏–ª—ñ */}

      <div className="greeting-text-container">
        <textarea
          ref={textareaRef}
          value={previewText}
          onChange={(e) => handleTextChange(e.target.value)}
          placeholder="–ê–±–æ –í–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç - –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '–ë–∞–∂–∞—é –∑–¥–æ—Ä–æ–≤'—è, —â–∞—Å—Ç—è —Ç–∞ –∫–≤—ñ—Ç—É—á–æ–≥–æ –ø—Ä–æ—Ü–≤—ñ—Ç–∞–Ω–Ω—è!'"
          className="greeting-textarea"
          maxLength={maxLength}
        />
        
        <div className="character-counter">
          <span>–ú—ñ–Ω—ñ–º—É–º 20 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è</span>
          <span className={`character-count ${getCharacterCountClass()}`}>
            {previewText.length}/{maxLength}
          </span>
         
        </div>



        {generatedGreetings.length > 0 && (
          <div className="confirm-actions">
            <button 
              onClick={() => {
                // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —Ç–µ–∫—Å—Ç - –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –∑ preview –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —Å—Ç–µ–π—Ç
                setGreetingText(previewText);
                
                if (scrollToNextSection) {
                  scrollToNextSection();
                }
              }}
              className="confirm-button"
              disabled={!previewText || previewText.length < 20}
            >
              ‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —ñ–¥–µ—é
            </button>
            
            <button 
              onClick={generateGreetingIdeas}
              disabled={isGenerating}
              className="regenerate-button"
            >
              üîÑ
            </button>
          </div>
        )}

        {generatedGreetings.length > 0 && (
          <div ref={generatedGreetingsRef} className="generated-greetings">
            <h4>üí° –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —ñ–¥–µ—ó –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å:</h4>
            <div className="greeting-options">
              {generatedGreetings.map((greeting, index) => (
                <button
                  key={index}
                  onClick={() => handleExampleClick(greeting)}
                  className="greeting-option"
                >
                  {greeting}
                </button>
              ))}
            </div>
          </div>
        )}

        <div className="greeting-tips">
                  <p>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ –∑–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ</p>
        </div>
      </div>
    </section>
  );
});

export default GreetingTextSection;
